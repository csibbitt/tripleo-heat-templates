---
heat_template_version: rocky

description: >
  Qpid dispatch router service for metrics and monitoring purposes

parameters:
  ContainerMetricsQdrImage:
    description: image
    type: string
  # *CS TODO: Check that we actually have an entry in here and we use it if so
  DefaultPasswords:
    default: {}
    type: json
  # *CS Unused, was unused in puppet version too
  EnableInternalTLS:
    default: false
    type: boolean
  # *CS Unused? Needed for network config?
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set via parameter_defaults
      in the resource registry.
    type: json
  InternalTLSCAFile:
    default: /etc/ipa/ca.crt
    description: Specifies the default CA cert to use if TLS is used for services in
      the internal network.
    type: string
  MetricsQdrAddresses:
    default:
    - distribution: multicast
      prefix: collectd
    - distribution: multicast
      prefix: ceilometer/metering.sample
    - distribution: multicast
      prefix: ceilometer/event.sample
    description: Addresses configuration (array of hashes).
    type: json
  MetricsQdrAuthenticateClient:
    default: 'no'
    description: Authenticate the client using SSL/TLS
    type: string
  MetricsQdrAutoLinks:
    default: []
    description: AutoLinks for the Configured Addresses
    type: json
  MetricsQdrConnectors:
    default: []
    description: Connectors configuration (array of hashes).
    type: json
  MetricsQdrExternalEndpoint:
    default: false
    description: 'Whether QDR should listen on external network interface. To enable
      listening on external network one must deploy QDRs in mesh mode.'
    type: boolean
  MetricsQdrLoggingSource:
    default:
      file: /var/log/containers/qdrouterd/metrics_qdr.log
      startmsg.regex: '^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]+
        \+[0-9]+)? [A-Z]+ \([a-z]+\) '
      tag: openstack.nova.consoleauth
    type: json
  MetricsQdrPassword:
    default: guest
    description: Password which should be used to authenticate to the deployed qdrouterd.
    hidden: true
    type: string
  MetricsQdrPort:
    default: 5666
    description: Service name or port number on which the qdrouterd will accept connections.
    type: number
  MetricsQdrSSLProfiles:
    default: []
    description: SSL Profiles for the connectors (array of hashes).
    type: json
  MetricsQdrSaslMechanisms:
    default: ANONYMOUS
    description: List of accepted SASL auth mechanisms for listener in format of comma
      separated list.
    type: string
  MetricsQdrSslCertDb:
    default: '/etc/ipa/ca.crt'
    description: Path to SSL certificate db for listener.
    type: string
  MetricsQdrSslCertFile:
    default: '/etc/pki/tls/certs/metrics_qdr.crt'
    description: Path to SSL certificate file for listener.
    type: string
  MetricsQdrSslKeyFile:
    default: '/etc/pki/tls/private/metrics_qdr.key'
    description: Path to SSL private key file for listener.
    type: string
  MetricsQdrSslPassword:
    default: ''
    description: SSL password to be supplied for listener.
    type: string
  MetricsQdrSslPwFile:
    default: ''
    description: Path to SSL password file for certificate key for listener.
    type: string
  MetricsQdrTrustedCerts:
    default: ''
    description: Path to file containing trusted certificates for listener.
    type: string
  MetricsQdrUseEncryption:
    default: false
    description: Set to true if it is required to encrypt connection to the peer for
      listener.
    type: boolean
  MetricsQdrUseSSL:
    default: false
    description: Set to true if it is required to use SSL or TLS on the connection for
      listener.
    type: boolean
  MetricsQdrUsername:
    default: guest
    description: Username which should be used to authenticate to the deployed qdrouterd.
    type: string
  MonitoringSubscriptionQdr:
    default: overcloud-qdr
    type: string
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  # *CS TODO: Implement the merging of MetricsQdrVars with RoleParameters so all our vars become overridable per-role?
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set via parameter_defaults
      in the resource registry.  This mapping overrides those in ServiceNetMapDefaults.
    type: json

  ##############################################################################
  # The existing MetricsQdr parameters will be combined with
  # MetricsQdrVars in the MetricsQdrParametersValue below. Eventually,
  # these legacy parameters will be deprecated in favour of passing the
  # parameters into the MetricsQdrVars param below.
  # For backwards compatibility these legacy params will be accepted, but will
  # be overwritten by any element passed to MetricsQdrVars.
  # New configs should add the vars directly into the
  # MetricsQdrVars parameter, which will not require anymore
  # changes in THT to add new params.
  ##############################################################################
  MetricsQdrVars:
    default: {}
    description: Hash of qdr variables used to configure the qdr role.
    tags:
    - role_specific
    type: json


conditions:
  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}

resources:
  ContainersCommon:
    type: ../containers-common.yaml

  MetricsQdrParametersValue:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_merge:
        - qdr_connectors: { get_param: MetricsQdrConnectors }
          qdr_listener_require_ssl: { get_param: MetricsQdrUseSSL }
          # *CS RFE to add support for this one? It seems to exist in puppet-qdr but be unused. So it's the same in my ansible for now
          qdr_listener_trusted_certs: { get_param: MetricsQdrTrustedCerts }
          # *CS TODO: In puppet These two are used to create a sasldb user. The qdr-config-ansible-role needs to be updated to handle this.
          qdr_username: { get_param: MetricsQdrUsername }
          qdr_password: { get_param: MetricsQdrPassword }
          # *CS Unused?
          metrics_qdr_use_encryption: { get_param: MetricsQdrUseEncryption }
          # *CS Unused?
          metrics_qdr_ssl_pw_file: { get_param: MetricsQdrSslPwFile }
          # *CS Unused?
          default_passwords: { get_param: DefaultPasswords }
          qdr_autolink_addresses: { get_param: MetricsQdrAutoLinks }
          # *CS Unused? (check puppet-qdr) - Used below in some haproxy hierdata
          metrics_qdr_external_endpoint: { get_param: MetricsQdrExternalEndpoint }
          # *CS TODO: Need to re-implement logic for this one (currently a hardcoded path I think?)
          tripleo_internal_tlscafile: { get_param: InternalTLSCAFile }
          qdr_addresses: { get_param: MetricsQdrAddresses }
          qdr_listener_port: { get_param: MetricsQdrPort }
          qdr_ssl_profiles: { get_param: MetricsQdrSSLProfiles }
          # *CS May need this for network config?
          #tripleo_endpoint_map: { get_param: EndpointMap }
          qdr_listener_sasl_mech: { get_param: MetricsQdrSaslMechanisms }
          qdr_listener_ssl_cert_db: { get_param: MetricsQdrSslCertDb }
          qdr_listener_ssl_cert_file: { get_param: MetricsQdrSslCertFile }
          qdr_listener_ssl_key_file: { get_param: MetricsQdrSslKeyFile }
          # *CS TODO: RFE to add support for this one? It seems to exist in puppet-qdr but be unused. So it's the same in my ansible for now
          qdr_listener_ssl_password: { get_param: MetricsQdrSslPassword }
          qdr_listener_auth_peer: { get_param: MetricsQdrAuthenticateClient }
          tripleo_enable_internal_tls: { get_param: EnableInternalTLS }
        - { get_param: MetricsQdrVars }

outputs:
  role_data:
    description: Role data for the metrics Qdr role.
    value:

      # *CS Q: I assume this is mandatory?
      service_name: qdr

      # *CS This appears related to sensu somehow
      monitoring_subscription: {get_param: MonitoringSubscriptionQdr}

      # See https://docs.openstack.org/tripleo-docs/latest/developer/tht_walkthrough/tls_for_services.html
      metadata_settings:
        if:
          - internal_tls_enabled
          -
            - service: metrics_qdr
              network:
                get_param:
                  - ServiceNetMap
                  - str_replace:
                      template: "ROLENAMEMetricsQdrNetwork"
                      params:
                        ROLENAME: {get_param: RoleName}
              type: node
          - null

      kolla_config:
        /var/lib/kolla/config_files/metrics_qdr.json:
          command: /usr/sbin/qdrouterd -c /etc/qpid-dispatch/qdrouterd.conf
          config_files:
          - dest: /etc/qpid-dispatch/
            merge: true
            preserve_properties: true
            source: /var/lib/kolla/config_files/src/*
          - dest: /
            merge: true
            optional: true
            preserve_properties: true
            source: /var/lib/kolla/config_files/src-tls/*
          permissions:
          - owner: qdrouterd:qdrouterd
            path: /var/lib/qdrouterd
            recurse: true
          - owner: qdrouterd:qdrouterd
            path: /var/log/qdrouterd
            recurse: true
          - optional: true
            owner: qdrouterd:qdrouterd
            path: /etc/pki/tls/certs/metrics_qdr.crt
          - optional: true
            owner: qdrouterd:qdrouterd
            path: /etc/pki/tls/private/metrics_qdr.key

      service_config_settings:
        # *CS TODO: Check this works as intended (?? Rsyslog config regex is set or something?)
        rsyslog:
          tripleo_logging_sources_metrics_qdr:
            - {get_param: MetricsQdrLoggingSource}

      config_settings:
        map_merge:
            # *CS TODO: Check this works as intended (ha proxy leads into our external endpoint in mesh mode)
          - tripleo::haproxy::metrics_qdr: {get_param: MetricsQdrExternalEndpoint}

            # *CS TODO: Check this works as intended (firewall rules appear on the nodes)
            tripleo::metrics_qdr::firewall_rules:
              map_merge:
              - '109 metrics qdr':
                  dport:
                    - {get_param: MetricsQdrPort}
              - map_merge:
                  repeat:
                    for_each:
                      <%net_cidr%>: {get_param: [ServiceData, net_cidr_map, ctlplane]}
                    template:
                      '109 accept internal metrics qdr ctlplane subnet <%net_cidr%>':
                        dport:
                          - 5667
                          - 5668
          - if:
            - internal_tls_enabled
            # My ansible does not use any of these, but the certmonger puppet automation needs them
            # *CS Q: Is the "s" optional? The docs say "generate_service_certificate": https://docs.openstack.org/project-deploy-guide/tripleo-docs/latest/features/ssl.html
            - generate_service_certificates: true

              # These two are used here: https://github.com/openstack/puppet-tripleo/blob/23478b8128bfcccfb75d1c60010ec232ce8c2978/files/certmonger-metrics-qdr-refresh.sh#L8-L10
              tripleo::metrics::qdr::service_certificate: { get_param: MetricsQdrSslCertFile }
              tripleo::metrics::qdr::service_key: { get_param: MetricsQdrSslKeyFile }

              # This one is used here: https://github.com/openstack/puppet-tripleo/blob/23478b8128bfcccfb75d1c60010ec232ce8c2978/manifests/profile/base/certmonger_user.pp#L193
              tripleo::profile::base::metrics::qdr::certificate_specs:
                service_certificate: { get_param: MetricsQdrSslCertFile }
                service_key: { get_param: MetricsQdrSslKeyFile }
                postsave_cmd: "/usr/bin/certmonger-metrics-qdr-refresh.sh"
                hostname:
                  str_replace:
                    template: "%{hiera('fqdn_NETWORK')}"
                    params:
                      NETWORK:
                        get_param:
                          - ServiceNetMap
                          - str_replace:
                              template: "ROLENAMEMetricsQdrNetwork"
                              params:
                                ROLENAME: {get_param: RoleName}
                principal:
                  str_replace:
                    template: "metrics_qdr/%{hiera('fqdn_NETWORK')}"
                    params:
                      NETWORK:
                        get_param:
                          - ServiceNetMap
                          - str_replace:
                              template: "ROLENAMEMetricsQdrNetwork"
                              params:
                                ROLENAME: {get_param: RoleName}
            - # Empty then
      docker_config:
        step_1:
          metrics_qdr:
            environment:
              KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
            healthcheck:
              test: /openstack/healthcheck
            image:
              get_param: ContainerMetricsQdrImage
            net: host
            privileged: false
            restart: always
            start_order: 1
            user: qdrouterd
            volumes:
              list_concat:
              - get_attr:
                - ContainersCommon
                - volumes
              - - /var/lib/kolla/config_files/metrics_qdr.json:/var/lib/kolla/config_files/config.json:ro
                - /var/lib/config-data/ansible-generated/metrics_qdr:/var/lib/kolla/config_files/src:ro
                - /var/lib/metrics_qdr:/var/lib/qdrouterd:z
                - /var/log/containers/metrics_qdr:/var/log/qdrouterd:z
              - if:
                - internal_tls_enabled
                - - /etc/pki/tls/certs/metrics_qdr.crt:/var/lib/kolla/config_files/src-tls/etc/pki/tls/certs/metrics_qdr.crt:ro
                  - /etc/pki/tls/private/metrics_qdr.key:/var/lib/kolla/config_files/src-tls/etc/pki/tls/private/metrics_qdr.key:ro
                - null

      # *CS TODO: Name tasks according to what they do, use tasks_from instead of include_rule and eliminate switching on deploy_stage in the ansible
      host_prep_tasks:
      - name: "Qdr host_prep_tasks tasks"
        include_role:
          name: tripleo-qdr-ansible-role
        vars:
        - deploy_stage: "host_prep_tasks"
        - {get_attr: [MetricsQdrParametersValue, value]}

      deploy_steps_tasks:
      - name: QDR Config on step 1
        when: step == '1'
        include_role:
          name: tripleo-qdr-ansible-role
        vars:
          - deploy_stage: "deploy_steps_tasks"  # THT should do all logic that has to do with "steps"
          - {get_attr: [MetricsQdrParametersValue, value]}
