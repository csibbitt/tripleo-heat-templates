---
heat_template_version: rocky

description: >
  Qpid dispatch router service for metrics and monitoring purposes

###############################################################################
# NOTE: Contents of this files are based on
# https://docs.openstack.org/tripleo-docs/latest/developer/tht_walkthrough/service_template_sections.html#ansible-related-parameters
###############################################################################

parameters:
  ContainerMetricsQdrConfigImage:
    description: The container image to use for the qdrouterd config_volume
    type: string
  ContainerMetricsQdrImage:
    description: image
    type: string
  DefaultPasswords:
    default: {}
    type: json
  EnableInternalTLS:
    default: false
    type: boolean
  EnableSTF:
    default: false
    description: Set to true to enable configuration for STF client.
    type: boolean
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set via parameter_defaults
      in the resource registry.
    type: json
  InternalTLSCAFile:
    default: /etc/ipa/ca.crt
    description: Specifies the default CA cert to use if TLS is used for services in
      the internal network.
    type: string
  MetricsQdrAddresses:
    default:
    - distribution: multicast
      prefix: collectd
    - distribution: multicast
      prefix: ceilometer/metering.sample
    - distribution: multicast
      prefix: ceilometer/event.sample
    description: Addresses configuration (array of hashes).
    type: json
  MetricsQdrAuthenticateClient:
    default: 'no'
    description: Authenticate the client using SSL/TLS
    type: string
  MetricsQdrAutoLinks:
    default: []
    description: AutoLinks for the Configured Addresses
    type: json
  MetricsQdrConnectors:
    default: []
    description: Connectors configuration (array of hashes).
    type: json
  MetricsQdrExternalEndpoint:
    default: false
    description: 'Whether QDR should listen on external network interface. To enable
      listening

      on external network one must deploy QDRs in mesh mode.

      '
    type: boolean
  MetricsQdrLoggingSource:
    default:
      file: /var/log/containers/qdrouterd/metrics_qdr.log
      startmsg.regex: '^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]+
        \+[0-9]+)? [A-Z]+ \([a-z]+\) '
      tag: openstack.nova.consoleauth
    type: json
  MetricsQdrPassword:
    default: guest
    description: Password which should be used to authenticate to the deployed qdrouterd.
    hidden: true
    type: string
  MetricsQdrPort:
    default: 5666
    description: Service name or port number on which the qdrouterd will accept connections.
    type: number
  MetricsQdrSSLProfiles:
    default: []
    description: SSL Profiles for the connectors (array of hashes).
    type: json
  MetricsQdrSaslMechanisms:
    default: ANONYMOUS
    description: List of accepted SASL auth mechanisms for listener in format of comma
      separated list.
    type: string
  MetricsQdrSslCertDb:
    default: '/etc/ipa/ca.crt'
    description: Path to SSL certificate db for listener.
    type: string
  MetricsQdrSslCertFile:
    default: '/etc/pki/tls/certs/metrics_qdr.crt'
    description: Path to SSL certificate file for listener.
    type: string
  MetricsQdrSslKeyFile:
    default: '/etc/pki/tls/private/metrics_qdr.key'
    description: Path to SSL private key file for listener.
    type: string
  MetricsQdrSslPassword:
    default: ''
    description: SSL password to be supplied for listener.
    type: string
  MetricsQdrSslPwFile:
    default: ''
    description: Path to SSL password file for certificate key for listener.
    type: string
  MetricsQdrTrustedCerts:
    default: ''
    description: Path to file containing trusted certificates for listener.
    type: string
  MetricsQdrUseEncryption:
    default: false
    description: Set to true if it is required to encrypt connection to the peer for
      listener.
    type: boolean
  MetricsQdrUseSSL:
    default: false
    description: Set to true if it is required to use SSL or TLS on the connection for
      listener.
    type: boolean
  MetricsQdrUsername:
    default: guest
    description: Username which should be used to authenticate to the deployed qdrouterd.
    type: string
  MonitoringSubscriptionQdr:
    default: overcloud-qdr
    type: string
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set via parameter_defaults
      in the resource registry.  This mapping overrides those in ServiceNetMapDefaults.
    type: json


  ##############################################################################
  # The existing collectd parameters will be combined with
  # QdrVars in the RoleParametersValue below. Eventually,
  # these legacy parameters will be deprecated in favour of passing the
  # parameters into the QdrVars param below.
  # For backwards compatibility these legacy params will be acceptd, but will
  # be overwritten by any element passed to Qdr.
  # New configs should add the vars directly into the
  # QdrVar parameter, which will not require anymore
  # changes in THT to add new params.
  ##############################################################################
  QdrVars:
    default: {}
    description: Hash of qdr variables used to configure the qdr role.
    tags:
    - role_specific
    type: json

conditions:
  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}
  enable_stf: {equals: [{get_param: EnableSTF}, true]}

resources:
  #############################################################################
  # TODO: Check that indentation is correct (list items don't indent)
  #############################################################################
  ContainersCommon:
    type: ../containers-common.yaml


  RoleParametersValue:
    type: OS::Heat::Value
    properties:
      type: json
      value:
        map_merge:
        - connectors: { get_param: MetricsQdrConnectors }
        - listener_require_ssl: { get_param: MetricsQdrUseSSL }
# RFE to add support for this one? It seems to exist in puppet-qdr but be unused. So it's the same in my ansible for now
        - listener_trusted_certs: { get_param: MetricsQdrTrustedCerts }
        - tripleo_service_net_map: { get_param: ServiceNetMap }
# What does this do?
        - monitoring_subscription_qdr: { get_param: MonitoringSubscriptionQdr }
# These are used to create a sasldb user. The qdr-config-ansible-role needs to be updated to handle this.
        - username: { get_param: MetricsQdrUsername }
        - password: { get_param: MetricsQdrPassword }
        - tripleo_role_name: { get_param: RoleName }
# Unused?
        - metrics_qdr_use_encryption: { get_param: MetricsQdrUseEncryption }
# Unused?
        - metrics_qdr_ssl_pw_file: { get_param: MetricsQdrSslPwFile }
# Unused?
        - default_passwords: { get_param: DefaultPasswords }
        - auto_links: { get_param: MetricsQdrAutoLinks }
# Unused?
        - metrics_qdr_external_endpoint: { get_param: MetricsQdrExternalEndpoint }
# Need to re-implement logic for this one
        - tripleo_internal_tlscafile: { get_param: InternalTLSCAFile }
# Do I need this?
        - role_parameters: { get_param: RoleParameters }
        - addresses: { get_param: MetricsQdrAddresses }
        - listener_port: { get_param: MetricsQdrPort }
# Unused? Does rsyslog need to find this in the hiera data on the host or something?
      # service_config_settings:
      #   rsyslog:
      #     tripleo_logging_sources_metrics_qdr:
      #       - {get_param: MetricsQdrLoggingSource}
        - metrics_qdr_logging_source: { get_param: MetricsQdrLoggingSource }
# Unused?
        - container_metrics_qdr_image: { get_param: ContainerMetricsQdrImage }
# May need this for network config
        - tripleo_service_data: { get_param: ServiceData }
        - ssl_profiles: { get_param: MetricsQdrSSLProfiles }
# May need this for network config
        - tripleo_endpoint_map: { get_param: EndpointMap }
# Unused? Especially now that I eliminated it
        - container_metrics_qdr_config_image: { get_param: ContainerMetricsQdrConfigImage }
        - listener_sasl_mech: { get_param: MetricsQdrSaslMechanisms }
        - listener_ssl_cert_db: { get_param: MetricsQdrSslCertDb }
        - listener_ssl_cert_file: { get_param: MetricsQdrSslCertFile }
        - listener_ssl_key_file: { get_param: MetricsQdrSslKeyFile }
# RFE to add support for this one? It seems to exist in puppet-qdr but be unused. So it's the same in my ansible for now
        - listener_ssl_pw_file: { get_param: MetricsQdrSslPassword }
        - listener_auth_peer: { get_param: MetricsQdrAuthenticateClient }
        - tripleo_enable_internal_tls: { get_param: EnableInternalTLS }

        #####################################################################
        # The last element should be the QdrVars, which
        # overides any of the legacy parameters above.
        #####################################################################
        - { get_param: QdrVars }

outputs:
  role_data:
    description: Role data for the metrics Qdr role.
    value:
      service_name: qdr

# What does this do?? Does not solve <13>Oct 13 15:12:12 puppet-user: Error: /Stage[main]/Tripleo::Certmonger::Metrics_qdr/Certmonger_certificate[metrics_qdr]: Could not evaluate: The certificate 'metrics_qdr' wasn't found in the list.",
      # metadata_settings:
      #   if:
      #     - internal_tls_enabled
      #     -
      #       - service: metrics_qdr
      #         network:
      #           get_param:
      #             - ServiceNetMap
      #             - str_replace:
      #                 template: "ROLENAMEMetricsQdrNetwork"
      #                 params:
      #                   ROLENAME: {get_param: RoleName}
      #         type: node
      #     - null

      kolla_config:
        /var/lib/kolla/config_files/metrics_qdr.json:
          command: /usr/sbin/qdrouterd -c /etc/qpid-dispatch/qdrouterd.conf
          config_files:
          - dest: /etc/qpid-dispatch/
            merge: true
            preserve_properties: true
            source: /var/lib/kolla/config_files/src/*
          - dest: /
            merge: true
            optional: true
            preserve_properties: true
            source: /var/lib/kolla/config_files/src-tls/*
          permissions:
          - owner: qdrouterd:qdrouterd
            path: /var/lib/qdrouterd
            recurse: true
          - owner: qdrouterd:qdrouterd
            path: /var/log/qdrouterd
            recurse: true
          - optional: true
            owner: qdrouterd:qdrouterd
            path: /etc/pki/tls/certs/metrics_qdr.crt
          - optional: true
            owner: qdrouterd:qdrouterd
            path: /etc/pki/tls/private/metrics_qdr.key
      config_settings:
        map_merge:
          - if:
            - internal_tls_enabled
            - generate_service_certificates: true

# Can I write these certmonger values from ansible instead of here?
# My ansible may need to produce certmonger-metrics-qdr-refresh.sh ?
# These are used by https://github.com/openstack/puppet-tripleo/blob/23478b8128bfcccfb75d1c60010ec232ce8c2978/files/certmonger-metrics-qdr-refresh.sh#L8
              tripleo::metrics::qdr::service_certificate: { get_param: MetricsQdrSslCertFile }
              tripleo::metrics::qdr::service_key: { get_param: MetricsQdrSslKeyFile }
# The CertmongerUser service will be looking for these. https://github.com/openstack/puppet-tripleo/blob/23478b8128bfcccfb75d1c60010ec232ce8c2978/manifests/profile/base/certmonger_user.pp#L88
              tripleo::profile::base::metrics::qdr::certificate_specs:
                service_certificate: { get_param: MetricsQdrSslCertFile }
                service_key: { get_param: MetricsQdrSslKeyFile }
                postsave_cmd: "/usr/bin/certmonger-metrics-qdr-refresh.sh"
                hostname:
                  str_replace:
                    template: "%{hiera('fqdn_NETWORK')}"
                    params:
                      NETWORK:
                        get_param:
                          - ServiceNetMap
                          - str_replace:
                              template: "ROLENAMEMetricsQdrNetwork"
                              params:
                                ROLENAME: {get_param: RoleName}
                principal:
                  str_replace:
                    template: "metrics_qdr/%{hiera('fqdn_NETWORK')}"
                    params:
                      NETWORK:
                        get_param:
                          - ServiceNetMap
                          - str_replace:
                              template: "ROLENAMEMetricsQdrNetwork"
                              params:
                                ROLENAME: {get_param: RoleName}

# These could be constructed in ansible from listener_ssl_cert_file and listener_ssl_key_file
              tripleo::profile::base::metrics::qdr::ssl_profiles:
                list_concat:
                  - get_param: MetricsQdrSSLProfiles
                  - - name: 'tlsProfile'
                      certFile: { get_param: MetricsQdrSslCertFile }
                      keyFile: { get_param: MetricsQdrSslKeyFile }
# This is already in ansible as tripleo_internal_tlscafile
                      caCertFile: {get_param: InternalTLSCAFile}
            - tripleo::profile::base::metrics::qdr::ssl_profiles: {get_param: MetricsQdrSSLProfiles}

      #########################################################################
      # TODO: Check that indentation is correct
      #########################################################################
      # TODO: Check that the output is correct, some heat functional are
      # called here, and they get formatted with the rest of the yaml
      #########################################################################
      docker_config:
        step_1:
          metrics_qdr:
            environment:
              KOLLA_CONFIG_STRATEGY: COPY_ALWAYS
            healthcheck:
              test: /openstack/healthcheck
            image:
              get_param: ContainerMetricsQdrImage
            net: host
            privileged: false
            restart: always
            start_order: 1
            user: qdrouterd
            volumes:
              list_concat:
              - get_attr:
                - ContainersCommon
                - volumes
              - - /var/lib/kolla/config_files/metrics_qdr.json:/var/lib/kolla/config_files/config.json:ro
                - /var/lib/config-data/ansible-generated/metrics_qdr:/var/lib/kolla/config_files/src:ro
                - /var/lib/metrics_qdr:/var/lib/qdrouterd:z
                - /var/log/containers/metrics_qdr:/var/log/qdrouterd:z
              - if:
                - internal_tls_enabled
                - - /etc/pki/tls/certs/metrics_qdr.crt:/var/lib/kolla/config_files/src-tls/etc/pki/tls/certs/metrics_qdr.crt:ro
                  - /etc/pki/tls/private/metrics_qdr.key:/var/lib/kolla/config_files/src-tls/etc/pki/tls/private/metrics_qdr.key:ro
# These are set in ContainersCommon
                  # - list_join:
                  #   - ':'
                  #   - - get_param: InternalTLSCAFile
                  #     - get_param: InternalTLSCAFile
                  #     - ro
                - null

      host_prep_tasks:
      - name: "Qdr host_prep_tasks tasks"
        include_role:
          name: tripleo-qdr-ansible-role
        vars:
        - deploy_stage: "host_prep_tasks"
        - {get_attr: [RoleParametersValue, value]}

      deploy_steps_tasks:
      - name: QDR Config on step 1
        when: step == '1'
        include_role:
          name: tripleo-qdr-ansible-role
        vars:
          - deploy_stage: "deploy_steps_tasks"
          - {get_attr: [RoleParametersValue, value]}